open ReasonJs;

let el = Document.createElement document "strong";
let el2 = Document.createElement document "small";
let event = Document.createEvent document "my-event";

/* Node interface */
let node = Element.asNode el;
let node2 = Element.asNode el2;
let _ = Node.childNodes node;
let _ = Node.firstChild node;
let _ = Node.lastChild node;
let _ = Node.nextSibling node;
let _ = Node.nodeName node;
let _ = Node.nodeType node;
let _ = Node.nodeValue node;
let _ = Node.setNodeValue node Js.Null.empty;
let _ = Node.ownerDocument node;
let _ = Node.parentNode node;
let _ = Node.parentElement node;
let _ = Node.previousSibling node;
let _ = Node.rootNode node;
let _ = Node.textContent node;
let _ = Node.setTextContent node "foo";

let _ = Node.appendChild node node2;
let _ = Node.cloneNode node;
let _ = Node.cloneNodeDeep node (Js.Boolean.to_js_boolean true);
let _ = Node.compareDocumentPosition node node2;
let _ = Node.contains node node2;
let _ = Node.getRootNode node;
let _ = Node.getRootNodeComposed node (Js.Boolean.to_js_boolean true);
let _ = Node.hasChildNodes node;
let _ = Node.insertBefore node node2 Js.Null.empty;
let _ = Node.isDefaultNamespace node "http://...";
let _ = Node.isEqualNode node node2;
let _ = Node.isSameNode node node2;
let _ = Node.lookupPrefix node;
let _ = Node.lookupNamespaceURI node Js.Null.empty;
let _ = Node.normalize node;
let _ = Node.removeChild node node2;

/* Element interface */
let _ = Element.assignedSlot el;
let _ = Element.attributes el;
let _ = Element.classList el;
let _ = Element.className el;
let _ = Element.setClassName el "my-class-name";
let _ = Element.clientHeight el;
let _ = Element.clientLeft el;
let _ = Element.clientTop el;
let _ = Element.clientWidth el;
let _ = Element.id el;
let _ = Element.setId el "my-id";
let _ = Element.innerHTML el;
let _ = Element.setInnerHTML el "<strong>stuff</strong>";
let _ = Element.localName el;
let _ = Element.namespaceURI el;
let _ = Element.nextElementSibling el;
let _ = Element.outerHTML el;
let _ = Element.setOuterHTML el "<strong>stuff</strong>";
let _ = Element.prefix el;
let _ = Element.previousElementSibling el;
let _ = Element.scrollHeight el;
let _ = Element.scrollLeft el;
let _ = Element.setScrollLeft el 0;
let _ = Element.scrollTop el;
let _ = Element.setScrollTop el 0;
let _ = Element.scrollWidth el;
let _ = Element.shadowRoot el;
let _ = Element.slot el;
let _ = Element.setSlot el "<strong>stuff</strong>";
let _ = Element.tagName el;

let _ = Element.attachShadow el { "mode": "open" };
let _ = Element.animate el { "transform": "translateT(0px)" } { "duration": 1000 };
let _ = Element.closest el "input";
let _ = Element.createShadowRoot el;
let _ = Element.getAttribute el "href";
let _ = Element.getAttributeNS el "http://..." "foo";
let _ = Element.getBoundingClientRect el;
let _ = Element.getClientRects el;
let _ = Element.getElementsByClassName el "some-class-name";
let _ = Element.getElementsByTagName el "pre";
let _ = Element.getElementsByTagNameNS el "http://..." "td";
let _ = Element.hasAttribute el "data-my-value";
let _ = Element.hasAttributeNS el "http://..." "foo";
let _ = Element.hasAttributes el;
let _ = Element.insertAdjacentElement el "beforebegin" el2;
let _ = Element.insertAdjacentText el "afterbegin" "text";
let _ = Element.matches el "input";
let _ = Element.querySelector el "input";
let _ = Element.querySelectorAll el "input";
let _ = Element.releasePointerCapture el (Event.pointerId event);
let _ = Element.remove el;
let _ = Element.removeAttribute el "href";
let _ = Element.removeAttributeNS el "http://..." "foo";
let _ = Element.requestFullscreen el;
let _ = Element.requestPointerLock el;
let _ = Element.scrollIntoView el;
let _ = Element.scrollIntoViewAlignToTop el (Js.Boolean.to_js_boolean true);
let _ = Element.scrollIntoViewWithOptions el { "block": "end", "behvaior": "smooth" };
let _ = Element.setAttribute el "href" "http://...";
let _ = Element.setAttributeNS el "http://..." "foo" "bar";
let _ = Element.setPointerCapture el (Event.pointerId event);

/* EventTarget interface */
let et = Element.asEventTarget el;
let handleClick e => print_endline "asd";
Element.addEventListener et "click" handleClick;
Element.addEventListenerWithOptions et "click" handleClick  { "passive": true };
Element.addEventListenerUseCapture et "click" handleClick (Js.Boolean.to_js_boolean true);
Element.removeEventListener et "click" handleClick;
Element.removeEventListenerWithOptions et "click" handleClick  { "passive": true };
Element.removeEventListenerUseCapture et "click" handleClick (Js.Boolean.to_js_boolean true);
let _ = Element.dispatchEvent et event;

/* HTMLElement interface */
let _ = Element.accessKey el;
let _ = Element.setAccessKey el "";
let _ = Element.accessKeyLabel el;
let _ = Element.contentEditable el;
let _ = Element.setContentEditable el "inherit";
let _ = Element.isContentEditable el;
let _ = Element.contextMenu el;
let _ = Element.setContextMenu el el2;
let _ = Element.dataset el;
let _ = Element.dir el;
let _ = Element.setDir el "ltr";
let _ = Element.draggable el;
let _ = Element.setDraggable el (Js.Boolean.to_js_boolean true);
let _ = Element.dropzone el;
let _ = Element.hidden el;
let _ = Element.setHidden el (Js.Boolean.to_js_boolean true);
let _ = Element.itemScope el;
let _ = Element.setItemScope el (Js.Boolean.to_js_boolean true);
let _ = Element.itemType el;
let _ = Element.itemId el;
let _ = Element.setItemId el "my-id";
let _ = Element.itemRef el;
let _ = Element.itemProp el;
let _ = Element.itemValue el;
let _ = Element.setItemValue el [%bs.raw "{}"];
let _ = Element.lang el;
let _ = Element.setLang el "en";
let _ = Element.offsetHeight el;
let _ = Element.offsetLeft el;
let _ = Element.offsetParent el;
let _ = Element.offsetTop el;
let _ = Element.offsetWidth el;
let _ = Element.spellcheck el;
let _ = Element.setSpellcheck el (Js.Boolean.to_js_boolean true);
let _ = Element.style el;
/* let _ = Element.setStyle el CSSStyleDeclaration.t; /* TODO: No way to make a CSSStyleDeclaration at the moment */*/
let _ = Element.tabIndex el;
let _ = Element.setTabIndex el 42;
let _ = Element.title el;
let _ = Element.setTitle el "hovertext!";
let _ = Element.translate el;
let _ = Element.setTranslate el (Js.Boolean.to_js_boolean true);

Element.blur el;
Element.click el;
Element.focus el;
Element.forceSpellCheck el;
